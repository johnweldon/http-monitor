// +build ignore

package main

import (
	"html/template"
	"log"
	"os"

	"gopkg.in/yaml.v2"
)

type raw struct {
	URL    string `yaml:"url"`
	Method string `yaml:"method"`
	Expect int    `yaml:"expect"`

	Header map[string][]string `yaml:"header"`
}

type checks struct {
	Checks []raw `yaml:"checks"`
}

func die(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %v", msg, err)
	}
}

func main() {
	fd, err := os.Open("checks.yml")
	die(err, "opening checks.yml")
	defer fd.Close()

	c := &checks{}
	dec := yaml.NewDecoder(fd)
	die(dec.Decode(c), "decoding checks.yml")

	fo, err := os.Create("check_data.go")
	die(err, "creating check_data.go")
	defer fo.Close()

	die(checkDataTemplate.Execute(fo, c), "write check_data.go")
}

var checkDataTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package main
var (
	checks = []check{
{{- range .Checks }}
		newCheck(
    {{- with .URL }}optURL("{{- . -}}"),{{ end }}
    {{- with .Method }}optMethod("{{- . -}}"),{{ end }}
    {{- with .Expect }}optExpectCode({{- . -}}),{{ end }}
    {{- range $k, $v := .Header }}{{ range $v }}optAddHdr("{{ $k }}", "{{ . }}"),{{ end }}{{ end -}}
    ),
{{- end }}
	}
)
`))
